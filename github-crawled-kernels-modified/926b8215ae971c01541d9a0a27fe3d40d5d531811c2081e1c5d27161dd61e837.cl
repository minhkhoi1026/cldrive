//{"output":1,"sharedMemory":0}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
kernel void LDSBandwidth_linear_verify(local float* sharedMemory, global float* output) {
  float val1 = (float)(0);
  float val2 = val1;
  unsigned int gid = get_global_id(0);
  unsigned int lid = get_local_id(0);
  for (int i = 0; i < 256 + get_local_size(0); i++)
    sharedMemory[hook(0, i)] = 0;
  barrier(0x01);
  val1 = val1 + sharedMemory[hook(0, 0 + lid)];
  val2 = val2 + sharedMemory[hook(0, 1 + lid)];
  val1 = val1 + sharedMemory[hook(0, 2 + lid)];
  val2 = val2 + sharedMemory[hook(0, 3 + lid)];
  val1 = val1 + sharedMemory[hook(0, 4 + lid)];
  val2 = val2 + sharedMemory[hook(0, 5 + lid)];
  val1 = val1 + sharedMemory[hook(0, 6 + lid)];
  val2 = val2 + sharedMemory[hook(0, 7 + lid)];
  val1 = val1 + sharedMemory[hook(0, 8 + lid)];
  val2 = val2 + sharedMemory[hook(0, 9 + lid)];
  val1 = val1 + sharedMemory[hook(0, 10 + lid)];
  val2 = val2 + sharedMemory[hook(0, 11 + lid)];
  val1 = val1 + sharedMemory[hook(0, 12 + lid)];
  val2 = val2 + sharedMemory[hook(0, 13 + lid)];
  val1 = val1 + sharedMemory[hook(0, 14 + lid)];
  val2 = val2 + sharedMemory[hook(0, 15 + lid)];
  val1 = val1 + sharedMemory[hook(0, 16 + lid)];
  val2 = val2 + sharedMemory[hook(0, 17 + lid)];
  val1 = val1 + sharedMemory[hook(0, 18 + lid)];
  val2 = val2 + sharedMemory[hook(0, 19 + lid)];
  val1 = val1 + sharedMemory[hook(0, 20 + lid)];
  val2 = val2 + sharedMemory[hook(0, 21 + lid)];
  val1 = val1 + sharedMemory[hook(0, 22 + lid)];
  val2 = val2 + sharedMemory[hook(0, 23 + lid)];
  val1 = val1 + sharedMemory[hook(0, 24 + lid)];
  val2 = val2 + sharedMemory[hook(0, 25 + lid)];
  val1 = val1 + sharedMemory[hook(0, 26 + lid)];
  val2 = val2 + sharedMemory[hook(0, 27 + lid)];
  val1 = val1 + sharedMemory[hook(0, 28 + lid)];
  val2 = val2 + sharedMemory[hook(0, 29 + lid)];
  val1 = val1 + sharedMemory[hook(0, 30 + lid)];
  val2 = val2 + sharedMemory[hook(0, 31 + lid)];
  val1 = val1 + sharedMemory[hook(0, 32 + lid)];
  val2 = val2 + sharedMemory[hook(0, 33 + lid)];
  val1 = val1 + sharedMemory[hook(0, 34 + lid)];
  val2 = val2 + sharedMemory[hook(0, 35 + lid)];
  val1 = val1 + sharedMemory[hook(0, 36 + lid)];
  val2 = val2 + sharedMemory[hook(0, 37 + lid)];
  val1 = val1 + sharedMemory[hook(0, 38 + lid)];
  val2 = val2 + sharedMemory[hook(0, 39 + lid)];
  val1 = val1 + sharedMemory[hook(0, 40 + lid)];
  val2 = val2 + sharedMemory[hook(0, 41 + lid)];
  val1 = val1 + sharedMemory[hook(0, 42 + lid)];
  val2 = val2 + sharedMemory[hook(0, 43 + lid)];
  val1 = val1 + sharedMemory[hook(0, 44 + lid)];
  val2 = val2 + sharedMemory[hook(0, 45 + lid)];
  val1 = val1 + sharedMemory[hook(0, 46 + lid)];
  val2 = val2 + sharedMemory[hook(0, 47 + lid)];
  val1 = val1 + sharedMemory[hook(0, 48 + lid)];
  val2 = val2 + sharedMemory[hook(0, 49 + lid)];
  val1 = val1 + sharedMemory[hook(0, 50 + lid)];
  val2 = val2 + sharedMemory[hook(0, 51 + lid)];
  val1 = val1 + sharedMemory[hook(0, 52 + lid)];
  val2 = val2 + sharedMemory[hook(0, 53 + lid)];
  val1 = val1 + sharedMemory[hook(0, 54 + lid)];
  val2 = val2 + sharedMemory[hook(0, 55 + lid)];
  val1 = val1 + sharedMemory[hook(0, 56 + lid)];
  val2 = val2 + sharedMemory[hook(0, 57 + lid)];
  val1 = val1 + sharedMemory[hook(0, 58 + lid)];
  val2 = val2 + sharedMemory[hook(0, 59 + lid)];
  val1 = val1 + sharedMemory[hook(0, 60 + lid)];
  val2 = val2 + sharedMemory[hook(0, 61 + lid)];
  val1 = val1 + sharedMemory[hook(0, 62 + lid)];
  val2 = val2 + sharedMemory[hook(0, 63 + lid)];
  val1 = val1 + sharedMemory[hook(0, 64 + lid)];
  val2 = val2 + sharedMemory[hook(0, 65 + lid)];
  val1 = val1 + sharedMemory[hook(0, 66 + lid)];
  val2 = val2 + sharedMemory[hook(0, 67 + lid)];
  val1 = val1 + sharedMemory[hook(0, 68 + lid)];
  val2 = val2 + sharedMemory[hook(0, 69 + lid)];
  val1 = val1 + sharedMemory[hook(0, 70 + lid)];
  val2 = val2 + sharedMemory[hook(0, 71 + lid)];
  val1 = val1 + sharedMemory[hook(0, 72 + lid)];
  val2 = val2 + sharedMemory[hook(0, 73 + lid)];
  val1 = val1 + sharedMemory[hook(0, 74 + lid)];
  val2 = val2 + sharedMemory[hook(0, 75 + lid)];
  val1 = val1 + sharedMemory[hook(0, 76 + lid)];
  val2 = val2 + sharedMemory[hook(0, 77 + lid)];
  val1 = val1 + sharedMemory[hook(0, 78 + lid)];
  val2 = val2 + sharedMemory[hook(0, 79 + lid)];
  val1 = val1 + sharedMemory[hook(0, 80 + lid)];
  val2 = val2 + sharedMemory[hook(0, 81 + lid)];
  val1 = val1 + sharedMemory[hook(0, 82 + lid)];
  val2 = val2 + sharedMemory[hook(0, 83 + lid)];
  val1 = val1 + sharedMemory[hook(0, 84 + lid)];
  val2 = val2 + sharedMemory[hook(0, 85 + lid)];
  val1 = val1 + sharedMemory[hook(0, 86 + lid)];
  val2 = val2 + sharedMemory[hook(0, 87 + lid)];
  val1 = val1 + sharedMemory[hook(0, 88 + lid)];
  val2 = val2 + sharedMemory[hook(0, 89 + lid)];
  val1 = val1 + sharedMemory[hook(0, 90 + lid)];
  val2 = val2 + sharedMemory[hook(0, 91 + lid)];
  val1 = val1 + sharedMemory[hook(0, 92 + lid)];
  val2 = val2 + sharedMemory[hook(0, 93 + lid)];
  val1 = val1 + sharedMemory[hook(0, 94 + lid)];
  val2 = val2 + sharedMemory[hook(0, 95 + lid)];
  val1 = val1 + sharedMemory[hook(0, 96 + lid)];
  val2 = val2 + sharedMemory[hook(0, 97 + lid)];
  val1 = val1 + sharedMemory[hook(0, 98 + lid)];
  val2 = val2 + sharedMemory[hook(0, 99 + lid)];
  val1 = val1 + sharedMemory[hook(0, 100 + lid)];
  val2 = val2 + sharedMemory[hook(0, 101 + lid)];
  val1 = val1 + sharedMemory[hook(0, 102 + lid)];
  val2 = val2 + sharedMemory[hook(0, 103 + lid)];
  val1 = val1 + sharedMemory[hook(0, 104 + lid)];
  val2 = val2 + sharedMemory[hook(0, 105 + lid)];
  val1 = val1 + sharedMemory[hook(0, 106 + lid)];
  val2 = val2 + sharedMemory[hook(0, 107 + lid)];
  val1 = val1 + sharedMemory[hook(0, 108 + lid)];
  val2 = val2 + sharedMemory[hook(0, 109 + lid)];
  val1 = val1 + sharedMemory[hook(0, 110 + lid)];
  val2 = val2 + sharedMemory[hook(0, 111 + lid)];
  val1 = val1 + sharedMemory[hook(0, 112 + lid)];
  val2 = val2 + sharedMemory[hook(0, 113 + lid)];
  val1 = val1 + sharedMemory[hook(0, 114 + lid)];
  val2 = val2 + sharedMemory[hook(0, 115 + lid)];
  val1 = val1 + sharedMemory[hook(0, 116 + lid)];
  val2 = val2 + sharedMemory[hook(0, 117 + lid)];
  val1 = val1 + sharedMemory[hook(0, 118 + lid)];
  val2 = val2 + sharedMemory[hook(0, 119 + lid)];
  val1 = val1 + sharedMemory[hook(0, 120 + lid)];
  val2 = val2 + sharedMemory[hook(0, 121 + lid)];
  val1 = val1 + sharedMemory[hook(0, 122 + lid)];
  val2 = val2 + sharedMemory[hook(0, 123 + lid)];
  val1 = val1 + sharedMemory[hook(0, 124 + lid)];
  val2 = val2 + sharedMemory[hook(0, 125 + lid)];
  val1 = val1 + sharedMemory[hook(0, 126 + lid)];
  val2 = val2 + sharedMemory[hook(0, 127 + lid)];
  val1 = val1 + sharedMemory[hook(0, 128 + lid)];
  val2 = val2 + sharedMemory[hook(0, 129 + lid)];
  val1 = val1 + sharedMemory[hook(0, 130 + lid)];
  val2 = val2 + sharedMemory[hook(0, 131 + lid)];
  val1 = val1 + sharedMemory[hook(0, 132 + lid)];
  val2 = val2 + sharedMemory[hook(0, 133 + lid)];
  val1 = val1 + sharedMemory[hook(0, 134 + lid)];
  val2 = val2 + sharedMemory[hook(0, 135 + lid)];
  val1 = val1 + sharedMemory[hook(0, 136 + lid)];
  val2 = val2 + sharedMemory[hook(0, 137 + lid)];
  val1 = val1 + sharedMemory[hook(0, 138 + lid)];
  val2 = val2 + sharedMemory[hook(0, 139 + lid)];
  val1 = val1 + sharedMemory[hook(0, 140 + lid)];
  val2 = val2 + sharedMemory[hook(0, 141 + lid)];
  val1 = val1 + sharedMemory[hook(0, 142 + lid)];
  val2 = val2 + sharedMemory[hook(0, 143 + lid)];
  val1 = val1 + sharedMemory[hook(0, 144 + lid)];
  val2 = val2 + sharedMemory[hook(0, 145 + lid)];
  val1 = val1 + sharedMemory[hook(0, 146 + lid)];
  val2 = val2 + sharedMemory[hook(0, 147 + lid)];
  val1 = val1 + sharedMemory[hook(0, 148 + lid)];
  val2 = val2 + sharedMemory[hook(0, 149 + lid)];
  val1 = val1 + sharedMemory[hook(0, 150 + lid)];
  val2 = val2 + sharedMemory[hook(0, 151 + lid)];
  val1 = val1 + sharedMemory[hook(0, 152 + lid)];
  val2 = val2 + sharedMemory[hook(0, 153 + lid)];
  val1 = val1 + sharedMemory[hook(0, 154 + lid)];
  val2 = val2 + sharedMemory[hook(0, 155 + lid)];
  val1 = val1 + sharedMemory[hook(0, 156 + lid)];
  val2 = val2 + sharedMemory[hook(0, 157 + lid)];
  val1 = val1 + sharedMemory[hook(0, 158 + lid)];
  val2 = val2 + sharedMemory[hook(0, 159 + lid)];
  val1 = val1 + sharedMemory[hook(0, 160 + lid)];
  val2 = val2 + sharedMemory[hook(0, 161 + lid)];
  val1 = val1 + sharedMemory[hook(0, 162 + lid)];
  val2 = val2 + sharedMemory[hook(0, 163 + lid)];
  val1 = val1 + sharedMemory[hook(0, 164 + lid)];
  val2 = val2 + sharedMemory[hook(0, 165 + lid)];
  val1 = val1 + sharedMemory[hook(0, 166 + lid)];
  val2 = val2 + sharedMemory[hook(0, 167 + lid)];
  val1 = val1 + sharedMemory[hook(0, 168 + lid)];
  val2 = val2 + sharedMemory[hook(0, 169 + lid)];
  val1 = val1 + sharedMemory[hook(0, 170 + lid)];
  val2 = val2 + sharedMemory[hook(0, 171 + lid)];
  val1 = val1 + sharedMemory[hook(0, 172 + lid)];
  val2 = val2 + sharedMemory[hook(0, 173 + lid)];
  val1 = val1 + sharedMemory[hook(0, 174 + lid)];
  val2 = val2 + sharedMemory[hook(0, 175 + lid)];
  val1 = val1 + sharedMemory[hook(0, 176 + lid)];
  val2 = val2 + sharedMemory[hook(0, 177 + lid)];
  val1 = val1 + sharedMemory[hook(0, 178 + lid)];
  val2 = val2 + sharedMemory[hook(0, 179 + lid)];
  val1 = val1 + sharedMemory[hook(0, 180 + lid)];
  val2 = val2 + sharedMemory[hook(0, 181 + lid)];
  val1 = val1 + sharedMemory[hook(0, 182 + lid)];
  val2 = val2 + sharedMemory[hook(0, 183 + lid)];
  val1 = val1 + sharedMemory[hook(0, 184 + lid)];
  val2 = val2 + sharedMemory[hook(0, 185 + lid)];
  val1 = val1 + sharedMemory[hook(0, 186 + lid)];
  val2 = val2 + sharedMemory[hook(0, 187 + lid)];
  val1 = val1 + sharedMemory[hook(0, 188 + lid)];
  val2 = val2 + sharedMemory[hook(0, 189 + lid)];
  val1 = val1 + sharedMemory[hook(0, 190 + lid)];
  val2 = val2 + sharedMemory[hook(0, 191 + lid)];
  val1 = val1 + sharedMemory[hook(0, 192 + lid)];
  val2 = val2 + sharedMemory[hook(0, 193 + lid)];
  val1 = val1 + sharedMemory[hook(0, 194 + lid)];
  val2 = val2 + sharedMemory[hook(0, 195 + lid)];
  val1 = val1 + sharedMemory[hook(0, 196 + lid)];
  val2 = val2 + sharedMemory[hook(0, 197 + lid)];
  val1 = val1 + sharedMemory[hook(0, 198 + lid)];
  val2 = val2 + sharedMemory[hook(0, 199 + lid)];
  val1 = val1 + sharedMemory[hook(0, 200 + lid)];
  val2 = val2 + sharedMemory[hook(0, 201 + lid)];
  val1 = val1 + sharedMemory[hook(0, 202 + lid)];
  val2 = val2 + sharedMemory[hook(0, 203 + lid)];
  val1 = val1 + sharedMemory[hook(0, 204 + lid)];
  val2 = val2 + sharedMemory[hook(0, 205 + lid)];
  val1 = val1 + sharedMemory[hook(0, 206 + lid)];
  val2 = val2 + sharedMemory[hook(0, 207 + lid)];
  val1 = val1 + sharedMemory[hook(0, 208 + lid)];
  val2 = val2 + sharedMemory[hook(0, 209 + lid)];
  val1 = val1 + sharedMemory[hook(0, 210 + lid)];
  val2 = val2 + sharedMemory[hook(0, 211 + lid)];
  val1 = val1 + sharedMemory[hook(0, 212 + lid)];
  val2 = val2 + sharedMemory[hook(0, 213 + lid)];
  val1 = val1 + sharedMemory[hook(0, 214 + lid)];
  val2 = val2 + sharedMemory[hook(0, 215 + lid)];
  val1 = val1 + sharedMemory[hook(0, 216 + lid)];
  val2 = val2 + sharedMemory[hook(0, 217 + lid)];
  val1 = val1 + sharedMemory[hook(0, 218 + lid)];
  val2 = val2 + sharedMemory[hook(0, 219 + lid)];
  val1 = val1 + sharedMemory[hook(0, 220 + lid)];
  val2 = val2 + sharedMemory[hook(0, 221 + lid)];
  val1 = val1 + sharedMemory[hook(0, 222 + lid)];
  val2 = val2 + sharedMemory[hook(0, 223 + lid)];
  val1 = val1 + sharedMemory[hook(0, 224 + lid)];
  val2 = val2 + sharedMemory[hook(0, 225 + lid)];
  val1 = val1 + sharedMemory[hook(0, 226 + lid)];
  val2 = val2 + sharedMemory[hook(0, 227 + lid)];
  val1 = val1 + sharedMemory[hook(0, 228 + lid)];
  val2 = val2 + sharedMemory[hook(0, 229 + lid)];
  val1 = val1 + sharedMemory[hook(0, 230 + lid)];
  val2 = val2 + sharedMemory[hook(0, 231 + lid)];
  val1 = val1 + sharedMemory[hook(0, 232 + lid)];
  val2 = val2 + sharedMemory[hook(0, 233 + lid)];
  val1 = val1 + sharedMemory[hook(0, 234 + lid)];
  val2 = val2 + sharedMemory[hook(0, 235 + lid)];
  val1 = val1 + sharedMemory[hook(0, 236 + lid)];
  val2 = val2 + sharedMemory[hook(0, 237 + lid)];
  val1 = val1 + sharedMemory[hook(0, 238 + lid)];
  val2 = val2 + sharedMemory[hook(0, 239 + lid)];
  val1 = val1 + sharedMemory[hook(0, 240 + lid)];
  val2 = val2 + sharedMemory[hook(0, 241 + lid)];
  val1 = val1 + sharedMemory[hook(0, 242 + lid)];
  val2 = val2 + sharedMemory[hook(0, 243 + lid)];
  val1 = val1 + sharedMemory[hook(0, 244 + lid)];
  val2 = val2 + sharedMemory[hook(0, 245 + lid)];
  val1 = val1 + sharedMemory[hook(0, 246 + lid)];
  val2 = val2 + sharedMemory[hook(0, 247 + lid)];
  val1 = val1 + sharedMemory[hook(0, 248 + lid)];
  val2 = val2 + sharedMemory[hook(0, 249 + lid)];
  val1 = val1 + sharedMemory[hook(0, 250 + lid)];
  val2 = val2 + sharedMemory[hook(0, 251 + lid)];
  val1 = val1 + sharedMemory[hook(0, 252 + lid)];
  val2 = val2 + sharedMemory[hook(0, 253 + lid)];
  val1 = val1 + sharedMemory[hook(0, 254 + lid)];
  val2 = val2 + sharedMemory[hook(0, 255 + lid)];
  output[hook(1, gid)] = val1 + val2;
}