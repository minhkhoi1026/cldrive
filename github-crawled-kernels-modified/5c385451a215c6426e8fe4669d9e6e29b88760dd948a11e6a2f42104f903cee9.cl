//{"d":10,"h":9,"indexBuffer":4,"maxBound":6,"minBound":5,"nDim":11,"pointColor":2,"pointPosition":0,"pointSize":1,"vertexBuffer":3,"viewBound":7,"viewOffset":8}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
union BufferType {
  float f;
  unsigned int u;
};

kernel void createVertexBufferCubes(global float4* pointPosition, global float* pointSize, global unsigned int* pointColor, global union BufferType* vertexBuffer, global unsigned int* indexBuffer, float4 minBound, float4 maxBound, float4 viewBound, float4 viewOffset, float h, global unsigned int* d, int nDim) {
  const int p = get_global_id(0);
  const float4 pos = pointPosition[hook(0, p)];
  const unsigned int rgba = pointColor[hook(2, p)];
  const float4 bound = maxBound - minBound;
  const float4 vec = (pos - minBound) / bound * viewBound + viewOffset;
  const float3 proj = (float3)(vec.x * (d[hook(10, 0)] == 0) + vec.y * (d[hook(10, 0)] == 1) + vec.z * (d[hook(10, 0)] == 2) + vec.w * (d[hook(10, 0)] == 3), vec.x * (d[hook(10, 1)] == 0) + vec.y * (d[hook(10, 1)] == 1) + vec.z * (d[hook(10, 1)] == 2) + vec.w * (d[hook(10, 1)] == 3), vec.x * (d[hook(10, 2)] == 0) + vec.y * (d[hook(10, 2)] == 1) + vec.z * (d[hook(10, 2)] == 2) + vec.w * (d[hook(10, 2)] == 3));
  h *= pointSize[hook(1, p)];

  if (nDim == 2) {
    float x1 = proj.x - h, y1 = proj.y - h;
    float x2 = proj.x + h, y2 = proj.y + h;
    global union BufferType* v = &vertexBuffer[hook(3, 12 * p)];
    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).u = rgba;
    global unsigned int* i = &indexBuffer[hook(4, 6 * p)];
    unsigned int vert = 4 * p;
    *(i++) = vert + 0;
    *(i++) = vert + 1;
    *(i++) = vert + 3;
    *(i++) = vert + 1;
    *(i++) = vert + 2;
    *(i++) = vert + 3;
  } else if (nDim == 3) {
    float x1 = proj.x - h, y1 = proj.y - h, z1 = proj.z - h;
    float x2 = proj.x + h, y2 = proj.y + h, z2 = proj.z + h;
    global union BufferType* v = &vertexBuffer[hook(3, 168 * p)];

    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).u = rgba;

    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f, (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).u = rgba;

    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;

    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).f = z1;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).f = z2;
    (*v++).f = 0.0f;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;

    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).f = z2;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y1;
    (*v++).f = z1;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).f = z1;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x1;
    (*v++).f = y2;
    (*v++).f = z2;
    (*v++).f = -1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;

    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).f = z1;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y1;
    (*v++).f = z2;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).f = z2;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    (*v++).f = x2;
    (*v++).f = y2;
    (*v++).f = z1;
    (*v++).f = 1.0f;
    (*v++).f = 0.0f;
    (*v++).f = 0.0f;
    (*v++).u = rgba;
    global unsigned int* i = &indexBuffer[hook(4, 36 * p)];
    unsigned int vert = 24 * p;

    *(i++) = vert + 0;
    *(i++) = vert + 2;
    *(i++) = vert + 1;
    *(i++) = vert + 0;
    *(i++) = vert + 3;
    *(i++) = vert + 2;

    *(i++) = vert + 4;
    *(i++) = vert + 5;
    *(i++) = vert + 6;
    *(i++) = vert + 6;
    *(i++) = vert + 7;
    *(i++) = vert + 4;

    *(i++) = vert + 8;
    *(i++) = vert + 10;
    *(i++) = vert + 9;
    *(i++) = vert + 8;
    *(i++) = vert + 11;
    *(i++) = vert + 10;

    *(i++) = vert + 12;
    *(i++) = vert + 13;
    *(i++) = vert + 14;
    *(i++) = vert + 14;
    *(i++) = vert + 15;
    *(i++) = vert + 12;

    *(i++) = vert + 16;
    *(i++) = vert + 18;
    *(i++) = vert + 17;
    *(i++) = vert + 16;
    *(i++) = vert + 19;
    *(i++) = vert + 18;

    *(i++) = vert + 20;
    *(i++) = vert + 21;
    *(i++) = vert + 22;
    *(i++) = vert + 22;
    *(i++) = vert + 23;
    *(i++) = vert + 20;
  }
}