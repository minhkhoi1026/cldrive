//{"buf":0,"round":1}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
uint2 ROTL64_1(const uint2 x, const unsigned int y) {
  return (uint2)((x.x << y) ^ (x.y >> (32 - y)), (x.y << y) ^ (x.x >> (32 - y)));
}
uint2 ROTL64_2(const uint2 x, const unsigned int y) {
  return (uint2)((x.y << y) ^ (x.x >> (32 - y)), (x.x << y) ^ (x.y >> (32 - y)));
}
ulong ROTL641(const ulong x) {
  return (x << 1 | x >> 63);
}
kernel void rnd(global uint2* buf, const unsigned int round) {
  unsigned int thread = get_global_id(0) - get_global_offset(0);
  unsigned int threads = get_global_size(0);

  uint2 state0, state1, state2, state3, state4, state5, state6, state7, state8, state9, state10, state11, state12, state13, state14, state15, state16, state17, state18, state19, state20, state21, state22, state23, state24;
  uint2 m0, m1, m2, m3, m4, m5, m6;

  state0 = buf[hook(0, 0 * threads + thread)];
  state1 = buf[hook(0, 1 * threads + thread)];
  state2 = buf[hook(0, 2 * threads + thread)];
  state3 = buf[hook(0, 3 * threads + thread)];
  state4 = buf[hook(0, 4 * threads + thread)];
  state5 = buf[hook(0, 5 * threads + thread)];
  state6 = buf[hook(0, 6 * threads + thread)];
  state7 = buf[hook(0, 7 * threads + thread)];
  state8 = buf[hook(0, 8 * threads + thread)];
  state9 = buf[hook(0, 9 * threads + thread)];
  state10 = buf[hook(0, 10 * threads + thread)];
  state11 = buf[hook(0, 11 * threads + thread)];
  state12 = buf[hook(0, 12 * threads + thread)];
  state13 = buf[hook(0, 13 * threads + thread)];
  state14 = buf[hook(0, 14 * threads + thread)];
  state15 = buf[hook(0, 15 * threads + thread)];
  state16 = buf[hook(0, 16 * threads + thread)];
  state17 = buf[hook(0, 17 * threads + thread)];
  state18 = buf[hook(0, 18 * threads + thread)];
  state19 = buf[hook(0, 19 * threads + thread)];
  state20 = buf[hook(0, 20 * threads + thread)];
  state21 = buf[hook(0, 21 * threads + thread)];
  state22 = buf[hook(0, 22 * threads + thread)];
  state23 = buf[hook(0, 23 * threads + thread)];
  state24 = buf[hook(0, 24 * threads + thread)];
  ;
  *((ulong*)&m0) = *((ulong*)&state0) ^ *((ulong*)&state5) ^ *((ulong*)&state10) * *((ulong*)&state15) * *((ulong*)&state20) ^ ROTL641(*((ulong*)&state2) ^ *((ulong*)&state7) ^ *((ulong*)&state12) * *((ulong*)&state17) * *((ulong*)&state22));
  *((ulong*)&m1) = *((ulong*)&state1) ^ *((ulong*)&state6) ^ *((ulong*)&state11) * *((ulong*)&state16) * *((ulong*)&state21) ^ ROTL641(*((ulong*)&state3) ^ *((ulong*)&state8) ^ *((ulong*)&state13) * *((ulong*)&state18) * *((ulong*)&state23));
  *((ulong*)&m2) = *((ulong*)&state2) ^ *((ulong*)&state7) ^ *((ulong*)&state12) * *((ulong*)&state17) * *((ulong*)&state22) ^ ROTL641(*((ulong*)&state4) ^ *((ulong*)&state9) ^ *((ulong*)&state14) * *((ulong*)&state19) * *((ulong*)&state24));
  *((ulong*)&m3) = *((ulong*)&state3) ^ *((ulong*)&state8) ^ *((ulong*)&state13) * *((ulong*)&state18) * *((ulong*)&state23) ^ ROTL641(*((ulong*)&state0) ^ *((ulong*)&state5) ^ *((ulong*)&state10) * *((ulong*)&state15) * *((ulong*)&state20));
  *((ulong*)&m4) = *((ulong*)&state4) ^ *((ulong*)&state9) ^ *((ulong*)&state14) * *((ulong*)&state19) * *((ulong*)&state24) ^ ROTL641(*((ulong*)&state1) ^ *((ulong*)&state6) ^ *((ulong*)&state11) * *((ulong*)&state16) * *((ulong*)&state21));
  m5 = state1 ^ m0;
  state0 ^= m4;
  state1 = ROTL64_2(state6 ^ m0, 12);
  state6 = ROTL64_1(state9 ^ m3, 20);
  state9 = ROTL64_2(state22 ^ m1, 29);
  state22 = ROTL64_2(state14 ^ m3, 7);
  state14 = ROTL64_1(state20 ^ m4, 18);
  state20 = ROTL64_2(state2 ^ m1, 30);
  state2 = ROTL64_2(state12 ^ m1, 11);
  state12 = ROTL64_1(state13 ^ m2, 25);
  state13 = ROTL64_1(state19 ^ m3, 8);
  state19 = ROTL64_2(state23 ^ m2, 24);
  state23 = ROTL64_2(state15 ^ m4, 9);
  state15 = ROTL64_1(state4 ^ m3, 27);
  state4 = ROTL64_1(state24 ^ m3, 14);
  state24 = ROTL64_1(state21 ^ m0, 2);
  state21 = ROTL64_2(state8 ^ m2, 23);
  state8 = ROTL64_2(state16 ^ m0, 13);
  state16 = ROTL64_2(state5 ^ m4, 4);
  state5 = ROTL64_1(state3 ^ m2, 28);
  state3 = ROTL64_1(state18 ^ m2, 21);
  state18 = ROTL64_1(state17 ^ m1, 15);
  state17 = ROTL64_1(state11 ^ m0, 10);
  state11 = ROTL64_1(state7 ^ m1, 6);
  state7 = ROTL64_1(state10 ^ m4, 3);
  state10 = ROTL64_1(m5, 1);
  m5 = state0;
  m6 = state1;
  state0 = bitselect(state0 ^ state2, state0, state1);
  state1 = bitselect(state1 ^ state3, state1, state2);
  state2 = bitselect(state2 ^ state4, state2, state3);
  state3 = bitselect(state3 ^ m5, state3, state4);
  state4 = bitselect(state4 ^ m6, state4, m5);
  m5 = state5;
  m6 = state6;
  state5 = bitselect(state5 ^ state7, state5, state6);
  state6 = bitselect(state6 ^ state8, state6, state7);
  state7 = bitselect(state7 ^ state9, state7, state8);
  state8 = bitselect(state8 ^ m5, state8, state9);
  state9 = bitselect(state9 ^ m6, state9, m5);
  m5 = state10;
  m6 = state11;
  state10 = bitselect(state10 ^ state12, state10, state11);
  state11 = bitselect(state11 ^ state13, state11, state12);
  state12 = bitselect(state12 ^ state14, state12, state13);
  state13 = bitselect(state13 ^ m5, state13, state14);
  state14 = bitselect(state14 ^ m6, state14, m5);
  m5 = state15;
  m6 = state16;
  state15 = bitselect(state15 ^ state17, state15, state16);
  state16 = bitselect(state16 ^ state18, state16, state17);
  state17 = bitselect(state17 ^ state19, state17, state18);
  state18 = bitselect(state18 ^ m5, state18, state19);
  state19 = bitselect(state19 ^ m6, state19, m5);
  m5 = state20;
  m6 = state21;
  state20 = bitselect(state20 ^ state22, state20, state21);
  state21 = bitselect(state21 ^ state23, state21, state22);
  state22 = bitselect(state22 ^ state24, state22, state23);
  state23 = bitselect(state23 ^ m5, state23, state24);
  state24 = bitselect(state24 ^ m6, state24, m5);
  state0.x ^= 0x00000001;
  ;
  buf[hook(0, 0 * threads + thread)] = state0;
  buf[hook(0, 1 * threads + thread)] = state1;
  buf[hook(0, 2 * threads + thread)] = state2;
  buf[hook(0, 3 * threads + thread)] = state3;
  buf[hook(0, 4 * threads + thread)] = state4;
  buf[hook(0, 5 * threads + thread)] = state5;
  buf[hook(0, 6 * threads + thread)] = state6;
  buf[hook(0, 7 * threads + thread)] = state7;
  buf[hook(0, 8 * threads + thread)] = state8;
  buf[hook(0, 9 * threads + thread)] = state9;
  buf[hook(0, 10 * threads + thread)] = state10;
  buf[hook(0, 11 * threads + thread)] = state11;
  buf[hook(0, 12 * threads + thread)] = state12;
  buf[hook(0, 13 * threads + thread)] = state13;
  buf[hook(0, 14 * threads + thread)] = state14;
  buf[hook(0, 15 * threads + thread)] = state15;
  buf[hook(0, 16 * threads + thread)] = state16;
  buf[hook(0, 17 * threads + thread)] = state17;
  buf[hook(0, 18 * threads + thread)] = state18;
  buf[hook(0, 19 * threads + thread)] = state19;
  buf[hook(0, 20 * threads + thread)] = state20;
  buf[hook(0, 21 * threads + thread)] = state21;
  buf[hook(0, 22 * threads + thread)] = state22;
  buf[hook(0, 23 * threads + thread)] = state23;
  buf[hook(0, 24 * threads + thread)] = state24;
  ;
}