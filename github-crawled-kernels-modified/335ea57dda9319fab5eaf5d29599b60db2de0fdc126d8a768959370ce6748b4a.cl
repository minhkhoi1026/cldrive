//{"dst":0,"src":1,"width":2}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
kernel void DecodeRGB5A3(global uchar* dst, const global uchar* src, int width) {
  int x = get_global_id(0) * 4, y = get_global_id(1) * 4;
  int srcOffset = x + (y * width) / 4;
  uchar8 val;
  uchar16 resNoAlpha, resAlpha, choice;
  val = vload8(srcOffset++, src);
  resNoAlpha.s26AE = val.even << (uchar4)1;
  resNoAlpha.s159D = val.even << (uchar4)6 | val.odd >> (uchar4)2;
  resNoAlpha.s048C = val.odd << (uchar4)3;
  resNoAlpha = bitselect(resNoAlpha, resNoAlpha >> (uchar16)5, (uchar16)0x3);
  resNoAlpha.s37BF = (uchar4)(0xFF);
  resAlpha.s26AE = bitselect(val.even << (uchar4)4, val.even, (uchar4)0xF);
  resAlpha.s159D = bitselect(val.odd, val.odd >> (uchar4)4, (uchar4)0xF);
  resAlpha.s048C = bitselect(val.odd << (uchar4)4, val.odd, (uchar4)0xF);
  resAlpha.s37BF = bitselect(val.even << (uchar4)1, val.even >> (uchar4)2, (uchar4)0x1C);
  resAlpha.s37BF = bitselect(resAlpha.s37BF, val.even >> (uchar4)5, (uchar4)0x3);
  choice = (uchar16)((uchar4)(val.even.s0), (uchar4)(val.even.s1), (uchar4)(val.even.s2), (uchar4)(val.even.s3));
  vstore16(select(resAlpha, resNoAlpha, choice), 0, dst + (y * width + x) * 4);
  ;
  dst += width * 4;
  val = vload8(srcOffset++, src);
  resNoAlpha.s26AE = val.even << (uchar4)1;
  resNoAlpha.s159D = val.even << (uchar4)6 | val.odd >> (uchar4)2;
  resNoAlpha.s048C = val.odd << (uchar4)3;
  resNoAlpha = bitselect(resNoAlpha, resNoAlpha >> (uchar16)5, (uchar16)0x3);
  resNoAlpha.s37BF = (uchar4)(0xFF);
  resAlpha.s26AE = bitselect(val.even << (uchar4)4, val.even, (uchar4)0xF);
  resAlpha.s159D = bitselect(val.odd, val.odd >> (uchar4)4, (uchar4)0xF);
  resAlpha.s048C = bitselect(val.odd << (uchar4)4, val.odd, (uchar4)0xF);
  resAlpha.s37BF = bitselect(val.even << (uchar4)1, val.even >> (uchar4)2, (uchar4)0x1C);
  resAlpha.s37BF = bitselect(resAlpha.s37BF, val.even >> (uchar4)5, (uchar4)0x3);
  choice = (uchar16)((uchar4)(val.even.s0), (uchar4)(val.even.s1), (uchar4)(val.even.s2), (uchar4)(val.even.s3));
  vstore16(select(resAlpha, resNoAlpha, choice), 0, dst + (y * width + x) * 4);
  ;
  dst += width * 4;
  val = vload8(srcOffset++, src);
  resNoAlpha.s26AE = val.even << (uchar4)1;
  resNoAlpha.s159D = val.even << (uchar4)6 | val.odd >> (uchar4)2;
  resNoAlpha.s048C = val.odd << (uchar4)3;
  resNoAlpha = bitselect(resNoAlpha, resNoAlpha >> (uchar16)5, (uchar16)0x3);
  resNoAlpha.s37BF = (uchar4)(0xFF);
  resAlpha.s26AE = bitselect(val.even << (uchar4)4, val.even, (uchar4)0xF);
  resAlpha.s159D = bitselect(val.odd, val.odd >> (uchar4)4, (uchar4)0xF);
  resAlpha.s048C = bitselect(val.odd << (uchar4)4, val.odd, (uchar4)0xF);
  resAlpha.s37BF = bitselect(val.even << (uchar4)1, val.even >> (uchar4)2, (uchar4)0x1C);
  resAlpha.s37BF = bitselect(resAlpha.s37BF, val.even >> (uchar4)5, (uchar4)0x3);
  choice = (uchar16)((uchar4)(val.even.s0), (uchar4)(val.even.s1), (uchar4)(val.even.s2), (uchar4)(val.even.s3));
  vstore16(select(resAlpha, resNoAlpha, choice), 0, dst + (y * width + x) * 4);
  ;
  dst += width * 4;
  val = vload8(srcOffset++, src);
  resNoAlpha.s26AE = val.even << (uchar4)1;
  resNoAlpha.s159D = val.even << (uchar4)6 | val.odd >> (uchar4)2;
  resNoAlpha.s048C = val.odd << (uchar4)3;
  resNoAlpha = bitselect(resNoAlpha, resNoAlpha >> (uchar16)5, (uchar16)0x3);
  resNoAlpha.s37BF = (uchar4)(0xFF);
  resAlpha.s26AE = bitselect(val.even << (uchar4)4, val.even, (uchar4)0xF);
  resAlpha.s159D = bitselect(val.odd, val.odd >> (uchar4)4, (uchar4)0xF);
  resAlpha.s048C = bitselect(val.odd << (uchar4)4, val.odd, (uchar4)0xF);
  resAlpha.s37BF = bitselect(val.even << (uchar4)1, val.even >> (uchar4)2, (uchar4)0x1C);
  resAlpha.s37BF = bitselect(resAlpha.s37BF, val.even >> (uchar4)5, (uchar4)0x3);
  choice = (uchar16)((uchar4)(val.even.s0), (uchar4)(val.even.s1), (uchar4)(val.even.s2), (uchar4)(val.even.s3));
  vstore16(select(resAlpha, resNoAlpha, choice), 0, dst + (y * width + x) * 4);
  ;
}