//{"g_qs":4,"g_rho_i":5,"g_rhs":7,"g_square":6,"g_u":0,"g_us":1,"g_vs":2,"g_ws":3,"gp0":8,"gp1":9,"gp2":10,"p_rhs":56,"p_u":11,"p_um1":47,"p_um2":46,"p_up1":16,"p_up2":19,"qs":36,"qs[k]":35,"qs[k][0]":34,"qs[k][1]":37,"qs[k][j + 1]":53,"rho_i":40,"rho_i[k]":39,"rho_i[k][0]":38,"rho_i[k][1]":41,"rho_i[k][j + 1]":54,"rhs":60,"rhs[k]":59,"rhs[k][j]":58,"rhs[k][j][i]":57,"square":44,"square[k]":43,"square[k][0]":42,"square[k][1]":45,"square[k][j + 1]":55,"u":15,"u[k]":14,"u[k][0]":13,"u[k][0][i]":12,"u[k][1]":18,"u[k][1][i]":17,"u[k][2]":21,"u[k][2][i]":20,"u[k][j + 2]":49,"u[k][j + 2][i]":48,"us":24,"us[k]":23,"us[k][0]":22,"us[k][1]":25,"us[k][j + 1]":50,"vs":28,"vs[k]":27,"vs[k][0]":26,"vs[k][1]":29,"vs[k][j + 1]":51,"ws":32,"ws[k]":31,"ws[k][0]":30,"ws[k][1]":33,"ws[k][j + 1]":52}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
kernel void compute_rhs4(global const double* g_u, global const double* g_us, global const double* g_vs, global const double* g_ws, global const double* g_qs, global const double* g_rho_i, global const double* g_square, global double* g_rhs, int gp0, int gp1, int gp2) {
  int i, j, k, m;
  double p_rhs[5];
  double p_u[5], p_up1[5], p_up2[5], p_um1[5], p_um2[5];
  double p_us, p_usp1, p_usm1;
  double p_vs, p_vsp1, p_vsm1;
  double p_ws, p_wsp1, p_wsm1;
  double p_qs, p_qsp1, p_qsm1;
  double p_rho_i, p_rho_ip1, p_rho_im1;
  double p_square, p_squarep1, p_squarem1;

  k = get_global_id(1) + 1;
  i = get_global_id(0) + 1;
  if (k > (gp2 - 2) || i > (gp0 - 2))
    return;

  global double(*us)[64 / 2 * 2 + 1][64 / 2 * 2 + 1] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1]) g_us;
  global double(*vs)[64 / 2 * 2 + 1][64 / 2 * 2 + 1] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1]) g_vs;
  global double(*ws)[64 / 2 * 2 + 1][64 / 2 * 2 + 1] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1]) g_ws;
  global double(*qs)[64 / 2 * 2 + 1][64 / 2 * 2 + 1] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1]) g_qs;
  global double(*rho_i)[64 / 2 * 2 + 1][64 / 2 * 2 + 1] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1]) g_rho_i;
  global double(*square)[64 / 2 * 2 + 1][64 / 2 * 2 + 1] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1]) g_square;
  global double(*u)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5]) g_u;
  global double(*rhs)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5] = (global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5]) g_rhs;

  p_u[hook(11, 0)] = u[hook(15, k)][hook(14, 0)][hook(13, i)][hook(12, 0)];
  p_u[hook(11, 1)] = u[hook(15, k)][hook(14, 0)][hook(13, i)][hook(12, 1)];
  p_u[hook(11, 2)] = u[hook(15, k)][hook(14, 0)][hook(13, i)][hook(12, 2)];
  p_u[hook(11, 3)] = u[hook(15, k)][hook(14, 0)][hook(13, i)][hook(12, 3)];
  p_u[hook(11, 4)] = u[hook(15, k)][hook(14, 0)][hook(13, i)][hook(12, 4)];
  p_up1[hook(16, 0)] = u[hook(15, k)][hook(14, 1)][hook(18, i)][hook(17, 0)];
  p_up1[hook(16, 1)] = u[hook(15, k)][hook(14, 1)][hook(18, i)][hook(17, 1)];
  p_up1[hook(16, 2)] = u[hook(15, k)][hook(14, 1)][hook(18, i)][hook(17, 2)];
  p_up1[hook(16, 3)] = u[hook(15, k)][hook(14, 1)][hook(18, i)][hook(17, 3)];
  p_up1[hook(16, 4)] = u[hook(15, k)][hook(14, 1)][hook(18, i)][hook(17, 4)];
  p_up2[hook(19, 0)] = u[hook(15, k)][hook(14, 2)][hook(21, i)][hook(20, 0)];
  p_up2[hook(19, 1)] = u[hook(15, k)][hook(14, 2)][hook(21, i)][hook(20, 1)];
  p_up2[hook(19, 2)] = u[hook(15, k)][hook(14, 2)][hook(21, i)][hook(20, 2)];
  p_up2[hook(19, 3)] = u[hook(15, k)][hook(14, 2)][hook(21, i)][hook(20, 3)];
  p_up2[hook(19, 4)] = u[hook(15, k)][hook(14, 2)][hook(21, i)][hook(20, 4)];

  p_us = us[hook(24, k)][hook(23, 0)][hook(22, i)];
  p_usp1 = us[hook(24, k)][hook(23, 1)][hook(25, i)];
  p_vs = vs[hook(28, k)][hook(27, 0)][hook(26, i)];
  p_vsp1 = vs[hook(28, k)][hook(27, 1)][hook(29, i)];
  p_ws = ws[hook(32, k)][hook(31, 0)][hook(30, i)];
  p_wsp1 = ws[hook(32, k)][hook(31, 1)][hook(33, i)];
  p_qs = qs[hook(36, k)][hook(35, 0)][hook(34, i)];
  p_qsp1 = qs[hook(36, k)][hook(35, 1)][hook(37, i)];
  p_rho_i = rho_i[hook(40, k)][hook(39, 0)][hook(38, i)];
  p_rho_ip1 = rho_i[hook(40, k)][hook(39, 1)][hook(41, i)];
  p_square = square[hook(44, k)][hook(43, 0)][hook(42, i)];
  p_squarep1 = square[hook(44, k)][hook(43, 1)][hook(45, i)];
  j = 1;
  p_um2[hook(46, 0)] = p_um1[hook(47, 0)];
  p_um2[hook(46, 1)] = p_um1[hook(47, 1)];
  p_um2[hook(46, 2)] = p_um1[hook(47, 2)];
  p_um2[hook(46, 3)] = p_um1[hook(47, 3)];
  p_um2[hook(46, 4)] = p_um1[hook(47, 4)];
  p_um1[hook(47, 0)] = p_u[hook(11, 0)];
  p_um1[hook(47, 1)] = p_u[hook(11, 1)];
  p_um1[hook(47, 2)] = p_u[hook(11, 2)];
  p_um1[hook(47, 3)] = p_u[hook(11, 3)];
  p_um1[hook(47, 4)] = p_u[hook(11, 4)];
  p_u[hook(11, 0)] = p_up1[hook(16, 0)];
  p_u[hook(11, 1)] = p_up1[hook(16, 1)];
  p_u[hook(11, 2)] = p_up1[hook(16, 2)];
  p_u[hook(11, 3)] = p_up1[hook(16, 3)];
  p_u[hook(11, 4)] = p_up1[hook(16, 4)];
  p_up1[hook(16, 0)] = p_up2[hook(19, 0)];
  p_up1[hook(16, 1)] = p_up2[hook(19, 1)];
  p_up1[hook(16, 2)] = p_up2[hook(19, 2)];
  p_up1[hook(16, 3)] = p_up2[hook(19, 3)];
  p_up1[hook(16, 4)] = p_up2[hook(19, 4)];
  p_up2[hook(19, 0)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 0)];
  p_up2[hook(19, 1)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 1)];
  p_up2[hook(19, 2)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 2)];
  p_up2[hook(19, 3)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 3)];
  p_up2[hook(19, 4)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 4)];
  p_usm1 = p_us;
  p_us = p_usp1;
  p_usp1 = us[hook(24, k)][hook(23, j + 1)][hook(50, i)];
  p_vsm1 = p_vs;
  p_vs = p_vsp1;
  p_vsp1 = vs[hook(28, k)][hook(27, j + 1)][hook(51, i)];
  p_wsm1 = p_ws;
  p_ws = p_wsp1;
  p_wsp1 = ws[hook(32, k)][hook(31, j + 1)][hook(52, i)];
  p_qsm1 = p_qs;
  p_qs = p_qsp1;
  p_qsp1 = qs[hook(36, k)][hook(35, j + 1)][hook(53, i)];
  p_rho_im1 = p_rho_i;
  p_rho_i = p_rho_ip1;
  p_rho_ip1 = rho_i[hook(40, k)][hook(39, j + 1)][hook(54, i)];
  p_squarem1 = p_square;
  p_square = p_squarep1;
  p_squarep1 = square[hook(44, k)][hook(43, j + 1)][hook(55, i)];
  p_rhs[hook(56, 0)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 0)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 0)] - 2.0 * p_u[hook(11, 0)] + p_um1[hook(47, 0)]) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] - p_um1[hook(47, 2)]);
  p_rhs[hook(56, 1)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 1)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 1)] - 2.0 * p_u[hook(11, 1)] + p_um1[hook(47, 1)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_usp1 - 2.0 * p_us + p_usm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 1)] * p_vsp1 - p_um1[hook(47, 1)] * p_vsm1);
  p_rhs[hook(56, 2)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 2)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 2)] - 2.0 * p_u[hook(11, 2)] + p_um1[hook(47, 2)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (4.0 / 3.0) * (p_vsp1 - 2.0 * p_vs + p_vsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] * p_vsp1 - p_um1[hook(47, 2)] * p_vsm1 + (p_up1[hook(16, 4)] - p_squarep1 - p_um1[hook(47, 4)] + p_squarem1) * 0.4);
  p_rhs[hook(56, 3)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 3)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 3)] - 2.0 * p_u[hook(11, 3)] + p_um1[hook(47, 3)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_wsp1 - 2.0 * p_ws + p_wsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 3)] * p_vsp1 - p_um1[hook(47, 3)] * p_vsm1);
  p_rhs[hook(56, 4)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 4)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 4)] - 2.0 * p_u[hook(11, 4)] + p_um1[hook(47, 4)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 - (1.4 * 1.4)) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_qsp1 - 2.0 * p_qs + p_qsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / 6.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_vsp1 * p_vsp1 - 2.0 * p_vs * p_vs + p_vsm1 * p_vsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.4 * 1.4) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 4)] * p_rho_ip1 - 2.0 * p_u[hook(11, 4)] * p_rho_i + p_um1[hook(47, 4)] * p_rho_im1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * ((1.4 * p_up1[hook(16, 4)] - 0.4 * p_squarep1) * p_vsp1 - (1.4 * p_um1[hook(47, 4)] - 0.4 * p_squarem1) * p_vsm1);
  for (m = 0; m < 5; m++) {
    rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, m)] = p_rhs[hook(56, m)] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (5.0 * p_u[hook(11, m)] - 4.0 * p_up1[hook(16, m)] + p_up2[hook(19, m)]);
  }

  j = 2;
  p_um2[hook(46, 0)] = p_um1[hook(47, 0)];
  p_um2[hook(46, 1)] = p_um1[hook(47, 1)];
  p_um2[hook(46, 2)] = p_um1[hook(47, 2)];
  p_um2[hook(46, 3)] = p_um1[hook(47, 3)];
  p_um2[hook(46, 4)] = p_um1[hook(47, 4)];
  p_um1[hook(47, 0)] = p_u[hook(11, 0)];
  p_um1[hook(47, 1)] = p_u[hook(11, 1)];
  p_um1[hook(47, 2)] = p_u[hook(11, 2)];
  p_um1[hook(47, 3)] = p_u[hook(11, 3)];
  p_um1[hook(47, 4)] = p_u[hook(11, 4)];
  p_u[hook(11, 0)] = p_up1[hook(16, 0)];
  p_u[hook(11, 1)] = p_up1[hook(16, 1)];
  p_u[hook(11, 2)] = p_up1[hook(16, 2)];
  p_u[hook(11, 3)] = p_up1[hook(16, 3)];
  p_u[hook(11, 4)] = p_up1[hook(16, 4)];
  p_up1[hook(16, 0)] = p_up2[hook(19, 0)];
  p_up1[hook(16, 1)] = p_up2[hook(19, 1)];
  p_up1[hook(16, 2)] = p_up2[hook(19, 2)];
  p_up1[hook(16, 3)] = p_up2[hook(19, 3)];
  p_up1[hook(16, 4)] = p_up2[hook(19, 4)];
  p_up2[hook(19, 0)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 0)];
  p_up2[hook(19, 1)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 1)];
  p_up2[hook(19, 2)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 2)];
  p_up2[hook(19, 3)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 3)];
  p_up2[hook(19, 4)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 4)];
  p_usm1 = p_us;
  p_us = p_usp1;
  p_usp1 = us[hook(24, k)][hook(23, j + 1)][hook(50, i)];
  p_vsm1 = p_vs;
  p_vs = p_vsp1;
  p_vsp1 = vs[hook(28, k)][hook(27, j + 1)][hook(51, i)];
  p_wsm1 = p_ws;
  p_ws = p_wsp1;
  p_wsp1 = ws[hook(32, k)][hook(31, j + 1)][hook(52, i)];
  p_qsm1 = p_qs;
  p_qs = p_qsp1;
  p_qsp1 = qs[hook(36, k)][hook(35, j + 1)][hook(53, i)];
  p_rho_im1 = p_rho_i;
  p_rho_i = p_rho_ip1;
  p_rho_ip1 = rho_i[hook(40, k)][hook(39, j + 1)][hook(54, i)];
  p_squarem1 = p_square;
  p_square = p_squarep1;
  p_squarep1 = square[hook(44, k)][hook(43, j + 1)][hook(55, i)];
  p_rhs[hook(56, 0)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 0)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 0)] - 2.0 * p_u[hook(11, 0)] + p_um1[hook(47, 0)]) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] - p_um1[hook(47, 2)]);
  p_rhs[hook(56, 1)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 1)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 1)] - 2.0 * p_u[hook(11, 1)] + p_um1[hook(47, 1)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_usp1 - 2.0 * p_us + p_usm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 1)] * p_vsp1 - p_um1[hook(47, 1)] * p_vsm1);
  p_rhs[hook(56, 2)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 2)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 2)] - 2.0 * p_u[hook(11, 2)] + p_um1[hook(47, 2)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (4.0 / 3.0) * (p_vsp1 - 2.0 * p_vs + p_vsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] * p_vsp1 - p_um1[hook(47, 2)] * p_vsm1 + (p_up1[hook(16, 4)] - p_squarep1 - p_um1[hook(47, 4)] + p_squarem1) * 0.4);
  p_rhs[hook(56, 3)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 3)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 3)] - 2.0 * p_u[hook(11, 3)] + p_um1[hook(47, 3)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_wsp1 - 2.0 * p_ws + p_wsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 3)] * p_vsp1 - p_um1[hook(47, 3)] * p_vsm1);
  p_rhs[hook(56, 4)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 4)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 4)] - 2.0 * p_u[hook(11, 4)] + p_um1[hook(47, 4)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 - (1.4 * 1.4)) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_qsp1 - 2.0 * p_qs + p_qsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / 6.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_vsp1 * p_vsp1 - 2.0 * p_vs * p_vs + p_vsm1 * p_vsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.4 * 1.4) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 4)] * p_rho_ip1 - 2.0 * p_u[hook(11, 4)] * p_rho_i + p_um1[hook(47, 4)] * p_rho_im1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * ((1.4 * p_up1[hook(16, 4)] - 0.4 * p_squarep1) * p_vsp1 - (1.4 * p_um1[hook(47, 4)] - 0.4 * p_squarem1) * p_vsm1);
  for (m = 0; m < 5; m++) {
    rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, m)] = p_rhs[hook(56, m)] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (-4.0 * p_um1[hook(47, m)] + 6.0 * p_u[hook(11, m)] - 4.0 * p_up1[hook(16, m)] + p_up2[hook(19, m)]);
  }

  for (j = 3; j <= gp1 - 4; j++) {
    p_um2[hook(46, 0)] = p_um1[hook(47, 0)];
    p_um2[hook(46, 1)] = p_um1[hook(47, 1)];
    p_um2[hook(46, 2)] = p_um1[hook(47, 2)];
    p_um2[hook(46, 3)] = p_um1[hook(47, 3)];
    p_um2[hook(46, 4)] = p_um1[hook(47, 4)];
    p_um1[hook(47, 0)] = p_u[hook(11, 0)];
    p_um1[hook(47, 1)] = p_u[hook(11, 1)];
    p_um1[hook(47, 2)] = p_u[hook(11, 2)];
    p_um1[hook(47, 3)] = p_u[hook(11, 3)];
    p_um1[hook(47, 4)] = p_u[hook(11, 4)];
    p_u[hook(11, 0)] = p_up1[hook(16, 0)];
    p_u[hook(11, 1)] = p_up1[hook(16, 1)];
    p_u[hook(11, 2)] = p_up1[hook(16, 2)];
    p_u[hook(11, 3)] = p_up1[hook(16, 3)];
    p_u[hook(11, 4)] = p_up1[hook(16, 4)];
    p_up1[hook(16, 0)] = p_up2[hook(19, 0)];
    p_up1[hook(16, 1)] = p_up2[hook(19, 1)];
    p_up1[hook(16, 2)] = p_up2[hook(19, 2)];
    p_up1[hook(16, 3)] = p_up2[hook(19, 3)];
    p_up1[hook(16, 4)] = p_up2[hook(19, 4)];
    p_up2[hook(19, 0)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 0)];
    p_up2[hook(19, 1)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 1)];
    p_up2[hook(19, 2)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 2)];
    p_up2[hook(19, 3)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 3)];
    p_up2[hook(19, 4)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 4)];
    p_usm1 = p_us;
    p_us = p_usp1;
    p_usp1 = us[hook(24, k)][hook(23, j + 1)][hook(50, i)];
    p_vsm1 = p_vs;
    p_vs = p_vsp1;
    p_vsp1 = vs[hook(28, k)][hook(27, j + 1)][hook(51, i)];
    p_wsm1 = p_ws;
    p_ws = p_wsp1;
    p_wsp1 = ws[hook(32, k)][hook(31, j + 1)][hook(52, i)];
    p_qsm1 = p_qs;
    p_qs = p_qsp1;
    p_qsp1 = qs[hook(36, k)][hook(35, j + 1)][hook(53, i)];
    p_rho_im1 = p_rho_i;
    p_rho_i = p_rho_ip1;
    p_rho_ip1 = rho_i[hook(40, k)][hook(39, j + 1)][hook(54, i)];
    p_squarem1 = p_square;
    p_square = p_squarep1;
    p_squarep1 = square[hook(44, k)][hook(43, j + 1)][hook(55, i)];
    p_rhs[hook(56, 0)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 0)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 0)] - 2.0 * p_u[hook(11, 0)] + p_um1[hook(47, 0)]) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] - p_um1[hook(47, 2)]);
    p_rhs[hook(56, 1)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 1)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 1)] - 2.0 * p_u[hook(11, 1)] + p_um1[hook(47, 1)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_usp1 - 2.0 * p_us + p_usm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 1)] * p_vsp1 - p_um1[hook(47, 1)] * p_vsm1);
    p_rhs[hook(56, 2)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 2)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 2)] - 2.0 * p_u[hook(11, 2)] + p_um1[hook(47, 2)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (4.0 / 3.0) * (p_vsp1 - 2.0 * p_vs + p_vsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] * p_vsp1 - p_um1[hook(47, 2)] * p_vsm1 + (p_up1[hook(16, 4)] - p_squarep1 - p_um1[hook(47, 4)] + p_squarem1) * 0.4);
    p_rhs[hook(56, 3)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 3)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 3)] - 2.0 * p_u[hook(11, 3)] + p_um1[hook(47, 3)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_wsp1 - 2.0 * p_ws + p_wsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 3)] * p_vsp1 - p_um1[hook(47, 3)] * p_vsm1);
    p_rhs[hook(56, 4)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 4)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 4)] - 2.0 * p_u[hook(11, 4)] + p_um1[hook(47, 4)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 - (1.4 * 1.4)) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_qsp1 - 2.0 * p_qs + p_qsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / 6.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_vsp1 * p_vsp1 - 2.0 * p_vs * p_vs + p_vsm1 * p_vsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.4 * 1.4) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 4)] * p_rho_ip1 - 2.0 * p_u[hook(11, 4)] * p_rho_i + p_um1[hook(47, 4)] * p_rho_im1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * ((1.4 * p_up1[hook(16, 4)] - 0.4 * p_squarep1) * p_vsp1 - (1.4 * p_um1[hook(47, 4)] - 0.4 * p_squarem1) * p_vsm1);
    for (m = 0; m < 5; m++) {
      rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, m)] = p_rhs[hook(56, m)] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (p_um2[hook(46, m)] - 4.0 * p_um1[hook(47, m)] + 6.0 * p_u[hook(11, m)] - 4.0 * p_up1[hook(16, m)] + p_up2[hook(19, m)]);
    }
  }

  j = gp1 - 3;
  p_um2[hook(46, 0)] = p_um1[hook(47, 0)];
  p_um2[hook(46, 1)] = p_um1[hook(47, 1)];
  p_um2[hook(46, 2)] = p_um1[hook(47, 2)];
  p_um2[hook(46, 3)] = p_um1[hook(47, 3)];
  p_um2[hook(46, 4)] = p_um1[hook(47, 4)];
  p_um1[hook(47, 0)] = p_u[hook(11, 0)];
  p_um1[hook(47, 1)] = p_u[hook(11, 1)];
  p_um1[hook(47, 2)] = p_u[hook(11, 2)];
  p_um1[hook(47, 3)] = p_u[hook(11, 3)];
  p_um1[hook(47, 4)] = p_u[hook(11, 4)];
  p_u[hook(11, 0)] = p_up1[hook(16, 0)];
  p_u[hook(11, 1)] = p_up1[hook(16, 1)];
  p_u[hook(11, 2)] = p_up1[hook(16, 2)];
  p_u[hook(11, 3)] = p_up1[hook(16, 3)];
  p_u[hook(11, 4)] = p_up1[hook(16, 4)];
  p_up1[hook(16, 0)] = p_up2[hook(19, 0)];
  p_up1[hook(16, 1)] = p_up2[hook(19, 1)];
  p_up1[hook(16, 2)] = p_up2[hook(19, 2)];
  p_up1[hook(16, 3)] = p_up2[hook(19, 3)];
  p_up1[hook(16, 4)] = p_up2[hook(19, 4)];
  p_up2[hook(19, 0)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 0)];
  p_up2[hook(19, 1)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 1)];
  p_up2[hook(19, 2)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 2)];
  p_up2[hook(19, 3)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 3)];
  p_up2[hook(19, 4)] = u[hook(15, k)][hook(14, j + 2)][hook(49, i)][hook(48, 4)];
  p_usm1 = p_us;
  p_us = p_usp1;
  p_usp1 = us[hook(24, k)][hook(23, j + 1)][hook(50, i)];
  p_vsm1 = p_vs;
  p_vs = p_vsp1;
  p_vsp1 = vs[hook(28, k)][hook(27, j + 1)][hook(51, i)];
  p_wsm1 = p_ws;
  p_ws = p_wsp1;
  p_wsp1 = ws[hook(32, k)][hook(31, j + 1)][hook(52, i)];
  p_qsm1 = p_qs;
  p_qs = p_qsp1;
  p_qsp1 = qs[hook(36, k)][hook(35, j + 1)][hook(53, i)];
  p_rho_im1 = p_rho_i;
  p_rho_i = p_rho_ip1;
  p_rho_ip1 = rho_i[hook(40, k)][hook(39, j + 1)][hook(54, i)];
  p_squarem1 = p_square;
  p_square = p_squarep1;
  p_squarep1 = square[hook(44, k)][hook(43, j + 1)][hook(55, i)];
  p_rhs[hook(56, 0)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 0)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 0)] - 2.0 * p_u[hook(11, 0)] + p_um1[hook(47, 0)]) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] - p_um1[hook(47, 2)]);
  p_rhs[hook(56, 1)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 1)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 1)] - 2.0 * p_u[hook(11, 1)] + p_um1[hook(47, 1)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_usp1 - 2.0 * p_us + p_usm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 1)] * p_vsp1 - p_um1[hook(47, 1)] * p_vsm1);
  p_rhs[hook(56, 2)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 2)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 2)] - 2.0 * p_u[hook(11, 2)] + p_um1[hook(47, 2)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (4.0 / 3.0) * (p_vsp1 - 2.0 * p_vs + p_vsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] * p_vsp1 - p_um1[hook(47, 2)] * p_vsm1 + (p_up1[hook(16, 4)] - p_squarep1 - p_um1[hook(47, 4)] + p_squarem1) * 0.4);
  p_rhs[hook(56, 3)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 3)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 3)] - 2.0 * p_u[hook(11, 3)] + p_um1[hook(47, 3)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_wsp1 - 2.0 * p_ws + p_wsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 3)] * p_vsp1 - p_um1[hook(47, 3)] * p_vsm1);
  p_rhs[hook(56, 4)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 4)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 4)] - 2.0 * p_u[hook(11, 4)] + p_um1[hook(47, 4)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 - (1.4 * 1.4)) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_qsp1 - 2.0 * p_qs + p_qsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / 6.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_vsp1 * p_vsp1 - 2.0 * p_vs * p_vs + p_vsm1 * p_vsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.4 * 1.4) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 4)] * p_rho_ip1 - 2.0 * p_u[hook(11, 4)] * p_rho_i + p_um1[hook(47, 4)] * p_rho_im1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * ((1.4 * p_up1[hook(16, 4)] - 0.4 * p_squarep1) * p_vsp1 - (1.4 * p_um1[hook(47, 4)] - 0.4 * p_squarem1) * p_vsm1);
  for (m = 0; m < 5; m++) {
    rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, m)] = p_rhs[hook(56, m)] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (p_um2[hook(46, m)] - 4.0 * p_um1[hook(47, m)] + 6.0 * p_u[hook(11, m)] - 4.0 * p_up1[hook(16, m)]);
  }

  j = gp1 - 2;
  p_um2[hook(46, 0)] = p_um1[hook(47, 0)];
  p_um2[hook(46, 1)] = p_um1[hook(47, 1)];
  p_um2[hook(46, 2)] = p_um1[hook(47, 2)];
  p_um2[hook(46, 3)] = p_um1[hook(47, 3)];
  p_um2[hook(46, 4)] = p_um1[hook(47, 4)];
  p_um1[hook(47, 0)] = p_u[hook(11, 0)];
  p_um1[hook(47, 1)] = p_u[hook(11, 1)];
  p_um1[hook(47, 2)] = p_u[hook(11, 2)];
  p_um1[hook(47, 3)] = p_u[hook(11, 3)];
  p_um1[hook(47, 4)] = p_u[hook(11, 4)];
  p_u[hook(11, 0)] = p_up1[hook(16, 0)];
  p_u[hook(11, 1)] = p_up1[hook(16, 1)];
  p_u[hook(11, 2)] = p_up1[hook(16, 2)];
  p_u[hook(11, 3)] = p_up1[hook(16, 3)];
  p_u[hook(11, 4)] = p_up1[hook(16, 4)];
  p_up1[hook(16, 0)] = p_up2[hook(19, 0)];
  p_up1[hook(16, 1)] = p_up2[hook(19, 1)];
  p_up1[hook(16, 2)] = p_up2[hook(19, 2)];
  p_up1[hook(16, 3)] = p_up2[hook(19, 3)];
  p_up1[hook(16, 4)] = p_up2[hook(19, 4)];
  p_usm1 = p_us;
  p_us = p_usp1;
  p_usp1 = us[hook(24, k)][hook(23, j + 1)][hook(50, i)];
  p_vsm1 = p_vs;
  p_vs = p_vsp1;
  p_vsp1 = vs[hook(28, k)][hook(27, j + 1)][hook(51, i)];
  p_wsm1 = p_ws;
  p_ws = p_wsp1;
  p_wsp1 = ws[hook(32, k)][hook(31, j + 1)][hook(52, i)];
  p_qsm1 = p_qs;
  p_qs = p_qsp1;
  p_qsp1 = qs[hook(36, k)][hook(35, j + 1)][hook(53, i)];
  p_rho_im1 = p_rho_i;
  p_rho_i = p_rho_ip1;
  p_rho_ip1 = rho_i[hook(40, k)][hook(39, j + 1)][hook(54, i)];
  p_squarem1 = p_square;
  p_square = p_squarep1;
  p_squarep1 = square[hook(44, k)][hook(43, j + 1)][hook(55, i)];
  p_rhs[hook(56, 0)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 0)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 0)] - 2.0 * p_u[hook(11, 0)] + p_um1[hook(47, 0)]) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] - p_um1[hook(47, 2)]);
  p_rhs[hook(56, 1)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 1)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 1)] - 2.0 * p_u[hook(11, 1)] + p_um1[hook(47, 1)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_usp1 - 2.0 * p_us + p_usm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 1)] * p_vsp1 - p_um1[hook(47, 1)] * p_vsm1);
  p_rhs[hook(56, 2)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 2)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 2)] - 2.0 * p_u[hook(11, 2)] + p_um1[hook(47, 2)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (4.0 / 3.0) * (p_vsp1 - 2.0 * p_vs + p_vsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 2)] * p_vsp1 - p_um1[hook(47, 2)] * p_vsm1 + (p_up1[hook(16, 4)] - p_squarep1 - p_um1[hook(47, 4)] + p_squarem1) * 0.4);
  p_rhs[hook(56, 3)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 3)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 3)] - 2.0 * p_u[hook(11, 3)] + p_um1[hook(47, 3)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_wsp1 - 2.0 * p_ws + p_wsm1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 3)] * p_vsp1 - p_um1[hook(47, 3)] * p_vsm1);
  p_rhs[hook(56, 4)] = rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, 4)] + (0.75 * (1.0 / ((1.0 / (double)(64 - 1)) * (1.0 / (double)(64 - 1))))) * (p_up1[hook(16, 4)] - 2.0 * p_u[hook(11, 4)] + p_um1[hook(47, 4)]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 - (1.4 * 1.4)) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_qsp1 - 2.0 * p_qs + p_qsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.0 / 6.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_vsp1 * p_vsp1 - 2.0 * p_vs * p_vs + p_vsm1 * p_vsm1) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(64 - 1)))) * (1.4 * 1.4) * (1.0 / (1.0 / (double)(64 - 1)))) * (p_up1[hook(16, 4)] * p_rho_ip1 - 2.0 * p_u[hook(11, 4)] * p_rho_i + p_um1[hook(47, 4)] * p_rho_im1) - (1.0 / (2.0 * (1.0 / (double)(64 - 1)))) * ((1.4 * p_up1[hook(16, 4)] - 0.4 * p_squarep1) * p_vsp1 - (1.4 * p_um1[hook(47, 4)] - 0.4 * p_squarem1) * p_vsm1);
  for (m = 0; m < 5; m++) {
    rhs[hook(60, k)][hook(59, j)][hook(58, i)][hook(57, m)] = p_rhs[hook(56, m)] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (p_um2[hook(46, m)] - 4.0 * p_um1[hook(47, m)] + 5.0 * p_u[hook(11, m)]);
  }
}