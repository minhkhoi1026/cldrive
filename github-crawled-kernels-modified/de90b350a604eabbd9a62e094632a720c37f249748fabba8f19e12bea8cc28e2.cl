//{"out":3,"out2":4,"val":0,"val2":1,"val3":2}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
__attribute__((reqd_work_group_size(1, 1, 1))) kernel void test_math(const float val, const float val2, const int val3, global float* out, global int* out2) {
  int i = 0;
  out[hook(3, i++)] = acos(val);
  out[hook(3, i++)] = acosh(4 * val);
  out[hook(3, i++)] = acospi(val);
  out[hook(3, i++)] = asin(val);
  out[hook(3, i++)] = asinh(val);
  out[hook(3, i++)] = asinpi(val);
  out[hook(3, i++)] = atan(val);
  out[hook(3, i++)] = atan2(val, val2);
  out[hook(3, i++)] = atanh(val);
  out[hook(3, i++)] = atanpi(val);
  out[hook(3, i++)] = atan2pi(val, val2);
  out[hook(3, i++)] = cbrt(val);
  out[hook(3, i++)] = ceil(val);
  out[hook(3, i++)] = copysign(val, val2);
  out[hook(3, i++)] = cos(val);
  out[hook(3, i++)] = cosh(val);
  out[hook(3, i++)] = cospi(val);
  out[hook(3, i++)] = erfc(val);
  out[hook(3, i++)] = erf(val);
  out[hook(3, i++)] = exp(val);
  out[hook(3, i++)] = exp2(val);
  out[hook(3, i++)] = exp10(val);
  out[hook(3, i++)] = expm1(val);
  out[hook(3, i++)] = fabs(val2);
  out[hook(3, i++)] = fdim(val, val2);
  out[hook(3, i++)] = floor(val);
  out[hook(3, i++)] = fma(val, val2, val2);
  out[hook(3, i++)] = fmax(val, val2);
  out[hook(3, i++)] = fmin(val, val2);
  out[hook(3, i++)] = fmod(val, val2);
  out[hook(3, i++)] = fract(val, &out[hook(3, i++)]);
  out[hook(3, i++)] = frexp(val, &out2[hook(4, i - 1)]);
  out[hook(3, i++)] = hypot(val, val2);
  out[hook(3, i++)] = ilogb(val);
  out[hook(3, i++)] = lgamma(val);
  out[hook(3, i++)] = lgamma_r(val, &out2[hook(4, i - 1)]);
  out[hook(3, i++)] = log(val);
  out[hook(3, i++)] = log2(val);
  out[hook(3, i++)] = log10(val);
  out[hook(3, i++)] = log1p(val);
  out[hook(3, i++)] = logb(val);
  out[hook(3, i++)] = mad(val, val2, val2);
  out[hook(3, i++)] = maxmag(val, val2);
  out[hook(3, i++)] = minmag(val, val2);
  out[hook(3, i++)] = modf(val, &out[hook(3, i++)]);
  out[hook(3, i++)] = nan((unsigned int)val3);
  out[hook(3, i++)] = nextafter(val, val2);
  out[hook(3, i++)] = pow(val, val2);
  out[hook(3, i++)] = pown(val, val3);
  out[hook(3, i++)] = powr(val, val2);
  out[hook(3, i++)] = remainder(val, val2);
  out[hook(3, i++)] = remquo(val, val2, &out2[hook(4, i - 1)]);
  out[hook(3, i++)] = rint(val);
  out[hook(3, i++)] = rootn(val, val3);
  out[hook(3, i++)] = round(val);
  out[hook(3, i++)] = rsqrt(val);
  out[hook(3, i++)] = sin(val);
  out[hook(3, i++)] = sincos(val, &out[hook(3, i++)]);
  out[hook(3, i++)] = sinh(val);
  out[hook(3, i++)] = sinpi(val);
  out[hook(3, i++)] = sqrt(val);
  out[hook(3, i++)] = tan(val);
  out[hook(3, i++)] = tanh(val);
  out[hook(3, i++)] = tanpi(val);
  out[hook(3, i++)] = tgamma(val);
  out[hook(3, i++)] = trunc(val);
}