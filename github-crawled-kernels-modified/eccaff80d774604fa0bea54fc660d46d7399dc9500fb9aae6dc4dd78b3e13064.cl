//{"N":3,"gaussian_kernel":5,"gaussian_kernel[i]":4,"img":7,"img1":0,"img1[yIndex + i]":8,"img1_cache":11,"img1_cache[2 * yIndex + i]":10,"img2":1,"img2[yIndex + i]":9,"img2_cache":13,"img2_cache[2 * yIndex + i]":12,"img[yIndex + i]":6,"out":2}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
constant float gaussian_kernel[11][11] = {{0.000003802917046317888, 0.00001759448244809565, 0.00006636107686176908, 0.0001945573540794799, 0.0004122408174475112, 0.0005609936362550451, 0.0004122408174475112, 0.0001945573540794799, 0.00006636107686176908, 0.00001759448244809565, 0.000003802917046317888}, {0.00001759448244809565, 0.0000814021996393737, 0.0003070245256103131, 0.000900134267933542, 0.001907263224158832, 0.002595479356074726, 0.001907263224158832, 0.000900134267933542, 0.0003070245256103131, 0.0000814021996393737, 0.00001759448244809565}, {0.00006636107686176908, 0.0003070245256103131, 0.001158003834587327, 0.003395034751176518, 0.007193621170012245, 0.00978936468007629, 0.007193621170012245, 0.003395034751176518, 0.001158003834587327, 0.0003070245256103131, 0.00006636107686176908}, {0.0001945573540794799, 0.000900134267933542, 0.003395034751176518, 0.00995356027107092, 0.02109025301085816, 0.02870045183627817, 0.02109025301085816, 0.00995356027107092, 0.003395034751176518, 0.000900134267933542, 0.0001945573540794799}, {0.0004122408174475112, 0.001907263224158832, 0.007193621170012245, 0.02109025301085816, 0.04468740430042675, 0.06081239016679303, 0.04468740430042675, 0.02109025301085816, 0.007193621170012245, 0.001907263224158832, 0.0004122408174475112}, {0.0005609936362550451, 0.002595479356074726, 0.00978936468007629, 0.02870045183627817, 0.06081239016679303, 0.0827559097623164, 0.06081239016679303, 0.02870045183627817, 0.00978936468007629, 0.002595479356074726, 0.0005609936362550451}, {0.0004122408174475112, 0.001907263224158832, 0.007193621170012245, 0.02109025301085816, 0.04468740430042675, 0.06081239016679303, 0.04468740430042675, 0.02109025301085816, 0.007193621170012245, 0.001907263224158832, 0.0004122408174475112}, {0.0001945573540794799, 0.000900134267933542, 0.003395034751176518, 0.00995356027107092, 0.02109025301085816, 0.02870045183627817, 0.02109025301085816, 0.00995356027107092, 0.003395034751176518, 0.000900134267933542, 0.0001945573540794799}, {0.00006636107686176908, 0.0003070245256103131, 0.001158003834587327, 0.003395034751176518, 0.007193621170012245, 0.00978936468007629, 0.007193621170012245, 0.003395034751176518, 0.001158003834587327, 0.0003070245256103131, 0.00006636107686176908}, {0.00001759448244809565, 0.0000814021996393737, 0.0003070245256103131, 0.000900134267933542, 0.001907263224158832, 0.002595479356074726, 0.001907263224158832, 0.000900134267933542, 0.0003070245256103131, 0.0000814021996393737, 0.00001759448244809565}, {0.000003802917046317888, 0.00001759448244809565, 0.00006636107686176908, 0.0001945573540794799, 0.0004122408174475112, 0.0005609936362550451, 0.0004122408174475112, 0.0001945573540794799, 0.00006636107686176908, 0.00001759448244809565, 0.000003802917046317888}};

inline float correlate_one(local int img[26][26], int xIndex, int yIndex) {
  float result = 0;

  for (int i = 0; i < 11; ++i)
    for (int j = 0; j < 11; ++j)
      result += gaussian_kernel[hook(5, i)][hook(4, j)] * img[hook(7, yIndex + i)][hook(6, xIndex + j)];

  return result;
}

inline float correlate_two(local int img1[26][26], local int img2[26][26], int xIndex, int yIndex) {
  float result = 0;

  for (int i = 0; i < 11; ++i)
    for (int j = 0; j < 11; ++j)
      result += gaussian_kernel[hook(5, i)][hook(4, j)] * img1[hook(0, yIndex + i)][hook(8, xIndex + j)] * img2[hook(1, yIndex + i)][hook(9, xIndex + j)];

  return result;
}

kernel void ssim(global const int* img1, global const int* img2, global float* out, int N) {
  int xOffset = get_local_size(0) * get_group_id(0);
  int yOffset = get_local_size(1) * get_group_id(1);
  int xIndex = get_local_id(0);
  int yIndex = get_local_id(1);

  local int img1_cache[26][26];
  local int img2_cache[26][26];

  if (xOffset + 2 * xIndex + 1 < N && yOffset + 2 * yIndex + 1 < N && xIndex < 13 && yIndex < 13) {
    for (int i = 0; i < 2; ++i) {
      for (int j = 0; j < 2; ++j) {
        img1_cache[hook(11, 2 * yIndex + i)][hook(10, 2 * xIndex + j)] = img1[hook(0, N * (yOffset + 2 * yIndex + i) + (xOffset + 2 * xIndex + j))];
        img2_cache[hook(13, 2 * yIndex + i)][hook(12, 2 * xIndex + j)] = img2[hook(1, N * (yOffset + 2 * yIndex + i) + (xOffset + 2 * xIndex + j))];
      }
    }
  }

  barrier(0x01);

  if (xOffset + xIndex > N - 11 || yOffset + yIndex > N - 11)
    return;

  float m1 = correlate_one(img1_cache, xIndex, yIndex);
  float m2 = correlate_one(img2_cache, xIndex, yIndex);

  float m1sq = m1 * m1;
  float m2sq = m2 * m2;
  float m1m2 = m1 * m2;

  float sigma1sq = correlate_two(img1_cache, img1_cache, xIndex, yIndex) - m1sq;
  float sigma2sq = correlate_two(img2_cache, img2_cache, xIndex, yIndex) - m2sq;
  float sigma12 = correlate_two(img1_cache, img2_cache, xIndex, yIndex) - m1m2;

  float ssim = ((0.0001 + 2 * m1m2) * (0.0009 + 2 * sigma12)) / ((0.0001 + m1sq + m2sq) * (0.0009 + sigma1sq + sigma2sq));
  out[hook(2, (N - 10) * (yOffset + yIndex) + (xOffset + xIndex))] = ssim;
}