//{"curDoubleArray":6,"curIntArray":5,"doubleArray":2,"floatArray":1,"intArray":0,"interval":4,"iteration":3}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
kernel void IA_25_DA_5(global int* intArray, global float* floatArray, global double* doubleArray, long iteration, int interval) {
  int offset = get_global_id(0) * interval;
  global int* curIntArray = intArray + offset;
  global double* curDoubleArray = doubleArray + offset;

  int i0, i1, i2, i3, i4;
  double d0, d1, d2, d3, d4;
  int iAddend;
  double dAddend;
  i0 = curIntArray[hook(5, 0)];
  i1 = curIntArray[hook(5, 1)];
  i2 = curIntArray[hook(5, 2)];
  i3 = curIntArray[hook(5, 3)];
  i4 = curIntArray[hook(5, 4)];
  d0 = curDoubleArray[hook(6, 0)];
  d1 = curDoubleArray[hook(6, 1)];
  d2 = curDoubleArray[hook(6, 2)];
  d3 = curDoubleArray[hook(6, 3)];
  d4 = curDoubleArray[hook(6, 4)];
  iAddend = i0;
  dAddend = d0;
  while (iteration-- > 1) {
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i0;
    d1 = d0 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i1;
    d2 = d1 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i2;
    d3 = d2 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i3;
    d4 = d3 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i4;
    d0 = d4 + dAddend;
    dAddend = dAddend * -0.999999;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i0;
    d1 = d0 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i1;
    d2 = d1 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i2;
    d3 = d2 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i3;
    d4 = d3 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i4;
    d0 = d4 + dAddend;
    dAddend = dAddend * -0.999999;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i0;
    d1 = d0 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i1;
    d2 = d1 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i2;
    d3 = d2 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i3;
    d4 = d3 + dAddend;
    i0 = i0 + iAddend;
    i1 = i1 + iAddend;
    i2 = i2 + iAddend;
    i3 = i3 + iAddend;
    i4 = i4 + iAddend;
    iAddend = iAddend + i4;
    d0 = d4 + dAddend;
    dAddend = dAddend * -0.999999;
  }
  curIntArray[hook(5, 0)] = i0;
  curIntArray[hook(5, 1)] = i1;
  curIntArray[hook(5, 2)] = i2;
  curIntArray[hook(5, 3)] = i3;
  curIntArray[hook(5, 4)] = i4;
  curDoubleArray[hook(6, 0)] = d0;
  curDoubleArray[hook(6, 1)] = d1;
  curDoubleArray[hook(6, 2)] = d2;
  curDoubleArray[hook(6, 3)] = d3;
  curDoubleArray[hook(6, 4)] = d4;
}