//{"curDoubleArray":6,"curFloatArray":5,"doubleArray":2,"floatArray":1,"intArray":0,"interval":4,"iteration":3}
int hook(int argId, int id) {
	int gID = get_global_id(0);
	printf("%d,%d,%d\n", gID, argId, id);
	return id;
}
kernel void FA_10_DA2_5(global int* intArray, global float* floatArray, global double2* doubleArray, long iteration, int interval) {
  int offset = get_global_id(0) * interval;
  global float* curFloatArray = floatArray + offset;
  global double2* curDoubleArray = doubleArray + offset;

  float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9;
  double2 d0, d1, d2, d3, d4;
  float fAddend;
  double2 dAddend;
  f0 = curFloatArray[hook(5, 0)];
  f1 = curFloatArray[hook(5, 1)];
  f2 = curFloatArray[hook(5, 2)];
  f3 = curFloatArray[hook(5, 3)];
  f4 = curFloatArray[hook(5, 4)];
  f5 = curFloatArray[hook(5, 5)];
  f6 = curFloatArray[hook(5, 6)];
  f7 = curFloatArray[hook(5, 7)];
  f8 = curFloatArray[hook(5, 8)];
  f9 = curFloatArray[hook(5, 9)];
  d0 = curDoubleArray[hook(6, 0)];
  d1 = curDoubleArray[hook(6, 1)];
  d2 = curDoubleArray[hook(6, 2)];
  d3 = curDoubleArray[hook(6, 3)];
  d4 = curDoubleArray[hook(6, 4)];
  fAddend = f0;
  dAddend = d0;
  while (iteration-- > 1) {
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
    d1 = d0 + dAddend;
    f2 = f0 + fAddend;
    f3 = f1 + fAddend;
    d2 = d1 + dAddend;
    f4 = f2 + fAddend;
    f5 = f3 + fAddend;
    d3 = d2 + dAddend;
    f6 = f4 + fAddend;
    f7 = f5 + fAddend;
    d4 = d3 + dAddend;
    f8 = f6 + fAddend;
    f9 = f7 + fAddend;
    d0 = d4 + dAddend;
    f0 = f8 + fAddend;
    f1 = f9 + fAddend;
    fAddend = fAddend * -0.9999F;
    dAddend = dAddend * -0.999999;
  }
  curFloatArray[hook(5, 0)] = f0;
  curFloatArray[hook(5, 1)] = f1;
  curFloatArray[hook(5, 2)] = f2;
  curFloatArray[hook(5, 3)] = f3;
  curFloatArray[hook(5, 4)] = f4;
  curFloatArray[hook(5, 5)] = f5;
  curFloatArray[hook(5, 6)] = f6;
  curFloatArray[hook(5, 7)] = f7;
  curFloatArray[hook(5, 8)] = f8;
  curFloatArray[hook(5, 9)] = f9;
  curDoubleArray[hook(6, 0)] = d0;
  curDoubleArray[hook(6, 1)] = d1;
  curDoubleArray[hook(6, 2)] = d2;
  curDoubleArray[hook(6, 3)] = d3;
  curDoubleArray[hook(6, 4)] = d4;
}